# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-.testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]



jobs:
  build:

    runs-on: ubuntu-latest

    env:
      PROJECT_ID: ${{ secrets.GKE_CLUSTER }}
      GKE_CLUSTER: autopilot-cluster-1    # cluster name
      GKE_ZONE: us-central1   # cluster zone
      IMAGE: my-image # image name
      IMAGE_TAG: test # image tag
      GAR_ZONE: autopilot-cluster-1 # artifact registry zone
      GAR_REPO: springboot-images-new # artifact registry repository
  
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

      # Step 3: Authenticate with Google Cloud
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      # Step 4: Configure Docker to authenticate with Google Artifact Registry
    - name: Set up Docker credentials for Google Artifact Registry
      run: |
        gcloud --quiet auth configure-docker us-central1-docker.pkg.dev

      # Step 5: Build the Docker image
    - name: Build Docker image
      run: |
        docker build -t us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/springboot-images-new/my-image:${{ github.sha }} .

      # Step 6: Push the Docker image to Google Artifact Registry
    - name: Push Docker image to Google Artifact Registry
      run: |
        docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/springboot-images-new/my-image:${{ github.sha }}

      
    

    # Setup gcloud CLI
    - id: 'auth'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.GKE_SA_KEY }}'

    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v2
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}

    - name: Deploy to GKE
      run: |
        # Dynamically set the image tag in the deployment
        kubectl set image deployment/my-image my-image=${GAR_REPO}/my-image:${{ github.sha }} --record
      

    - name: Update deployment.yaml with GitHub SHA
      run: |
        sed -i 's|gcr.io/${{ secrets.GCP_PROJECT_ID }}/my-app:latest|${GAR_REPOSITORY}/my-app:${{ github.sha }}|g' resources.yaml

    - name: Apply the deployment to GKE
      run: |
        kubectl apply -f resources.yaml
        kubectl rollout status deployment/my-image
       
    

     

   

  

    

    
